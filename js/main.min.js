document.addEventListener('DOMContentLoaded', function (event) {
	const itemsEmpty = document.querySelector('.items-empty');
	const foodsList = document.querySelector('.foods__list');
	const cartList = document.querySelector('.items-list');
	const totalPrice = document.querySelector('.items-total__price');
	const makeOrderBtn = document.querySelector('.items-total__btn');
	const tabsActive = document.querySelectorAll('.tabs__nav-btn');
	const BASE_URL = 'https://gusto-backend-avacados.herokuapp.com/';
	const URL_LINK = `${BASE_URL}menulist?type=`;
	const MAKEORDER_URL = `${BASE_URL}makeorder`;
	let menu = [
		{
			id: 2,
			name: 'Gazpacho',
			image: 'images/food-1.jpg',
			price: 19000,
			description: 'hello osh',
			type: 'first',
		},
		{
			id: 3,
			name: 'Fried fish',
			image: 'images/food-1.jpg',
			price: 27000,
			description: 'hello lagman',
			calories: 'first',
		},
		{
			id: 4,
			name: 'Coca-Cola',
			image: 'images/food-1.jpg',
			price: 8999,
			description: 'hello shashlik',
			calories: 'first',
		},
	];

	const currentPath = document.location.pathname;

	const menu1 = getMenuByType('FS');
	const menu2 = getMenuByType('SC');
	const menu3 = getMenuByType('DR');

	if (currentPath === '/index.html') {
		Promise.all([menu1, menu2, menu3]).then(data => {
			let resultList = data.flat(1);

			let menuListFirst = resultList.filter(dish => dish.type === 'FS');
			let menuListSecond = resultList.filter(dish => dish.type === 'SC');
			let menuListThird = resultList.filter(dish => dish.type === 'DR');

			// tabsActive.forEach(tab => {
			// 	tab.addEventListener('click', (e) => {
			// 		if(e.target.innerText === 'First dishes'){

			// 		}
			// 	})
			// })

			resultList.forEach(item => {
				foodsList.insertAdjacentHTML(
					'beforeend',
					`
			<div class="foods__item">
				<a class="foods__img-box" href="food.html">
					<img
						src="${item.image}"
						alt=""
						class="foods__img"
					/>
				</a>
				<div class="foods__item-name">${item.name}</div>
				<button class="foods__order-btn">+</button>
			</div>`,
				);
			});

			foodsList.addEventListener('click', e => {
				const item = e.target;
				if (item.classList[0] === 'foods__order-btn') {
					let itemName = e.path[1].childNodes[3].innerText;
					let obj = resultList.find(el => el.name === itemName);
					updateOrder({ ...obj, count: 1 }, 1);
				}
			});
		});
	}

	function getMenuByType(type) {
		const url = `${URL_LINK}${type}`;
		return fetch(url)
			.then(response => {
				return response.json();
			})
			.then(data => data);
	}

	function updateCartItems(items, item, index) {
		if (item.count === 0) {
			return [...items.slice(0, index), ...items.slice(index + 1)];
		}
		if (index === -1) {
			return [...items, item];
		}
		return [...items.slice(0, index), item, ...items.slice(index + 1)];
	}

	function updateCartItem(item, foundItem, quantity) {
		if (foundItem) {
			return {
				...foundItem,
				count: foundItem.count + quantity,
				price: foundItem.price + quantity * item.price,
			};
		} else {
			return {
				...item,
			};
		}
	}

	function updateOrder(item, quantity) {
		let items;
		if (localStorage.getItem('items') === null) {
			items = [];
		} else {
			items = JSON.parse(localStorage.getItem('items'));
		}
		const index = items.findIndex(el => el.id === item.id);
		const foundItem = items[index];
		const newItem = updateCartItem(item, foundItem, quantity);

		items = updateCartItems(items, newItem, index);
		localStorage.setItem('items', JSON.stringify(items));
	}

	if (currentPath === '/cart.html') {
		function getCartItems() {
			let items;
			if (localStorage.getItem('items') === null) {
				items = [];
			} else {
				items = JSON.parse(localStorage.getItem('items'));
			}

			// items.forEach(({ id, name, image, price, description, calories, count }) => {
			// 	cartList.insertAdjacentHTML(
			// 		'beforeend',
			// 		`
			//     <div class="cart-item">
			//     <div class="cart-item__image">
			//         <img src="${image}" alt="${name}" />
			//     </div>
			//     <div class="cart-item__description">
			//         <h5 class="description__title">${name}</h5>
			//         <span class='description__price'>${price} UZS</span>
			//     </div>
			//     <div class="cart-item__counter">
			//         <button class="btn btn-plus">+</button>
			//         <span>${count}</span>
			//         <button class="btn btn-minus">-</button>
			//     </div>
			// </div>`,
			// 	);
			// });

			const total = items.reduce((acc, el) => acc + el.price, 0);
			totalPrice.innerText = total + ' Сум';

			// items.length == 0 ? (itemsEmpty.innerText = 'Ваша корзина пока пуста') : '';

			makeOrderBtn.addEventListener('click', () => {
				// let data = items.map(el => {
				// 	return { id: 2, count: 2 };
				// });
				fetch('https://gusto-backend-avacados.herokuapp.com/makeorder', {
					method: 'POST',
					body: JSON.stringify({ data: [{id: 2, count: 2}, {id: 4, count: 3}] }),
					headers: {
						'Content-Type': 'application/json',
					},
				});
			});
		}
		cartList.addEventListener('click', e => {
			if (e.target.classList[1] === 'btn-plus') {
				let itemName = e.path[2].childNodes[3].childNodes[1].innerText;
				let obj = menu.find(el => el.name === itemName);
				updateOrder(obj, 1);
				location.reload();
			} else if (e.target.classList[1] === 'btn-minus') {
				let itemName = e.path[2].childNodes[3].childNodes[1].innerText;
				let obj = menu.find(el => el.name === itemName);
				updateOrder(obj, -1);
				location.reload();
			}
		});

		getCartItems();
	}

	const tabsBtn = document.querySelectorAll('.tabs__nav-btn');
	const tabsItems = document.querySelectorAll('.tabs__item');

	tabsBtn.forEach(onTabClick);

	function onTabClick(item) {
		item.addEventListener('click', function () {
			let currentBtn = item;
			let tabId = currentBtn.getAttribute('data-tab');
			let currentTab = document.querySelector(tabId);

			if (!currentBtn.classList.contains('active')) {
				tabsBtn.forEach(function (item) {
					item.classList.remove('active');
				});

				tabsItems.forEach(function (item) {
					item.classList.remove('active');
				});

				currentBtn.classList.add('active');
				currentTab.classList.add('active');
			}
		});
	}
});
